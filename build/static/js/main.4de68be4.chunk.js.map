{"version":3,"sources":["component.js","App.js","serviceWorker.js","index.js"],"names":["Data","props","state","biden","trump","winner","bidenVotes","trumpVotes","fetch","then","data","json","body","key","Object","keys","temp","votedFor","setState","console","log","whiteFont","color","image","height","bigFont","fontSize","column","float","width","padding","this","findWinner","className","style","src","alt","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uRAGqBA,G,wDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,MAAO,iBACPC,MAAO,iBACPC,OAAQ,kBANG,E,yDAUL,IAAD,OACLC,EAAa,EACbC,EAAa,EACbF,EAAS,eACbG,MAAM,qCACDC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAACG,GAGH,IAAK,IAAIC,KAFTD,EAAOA,EAAKF,KAEII,OAAOC,KAAKH,GAAO,CAC/B,IAAII,EAAOJ,EAAKC,GAAKI,SACR,mBAATD,EACAV,GAAc,EACE,iBAATU,IACPT,GAAc,GAKlBF,EADDC,EAAaC,EACH,eAEA,eAGb,EAAKW,SAAS,CACVf,MAAOG,EACPF,MAAOG,EACPF,OAAQA,IAEZc,QAAQC,IAAR,uBAA4Bd,EAA5B,2BAAyDC,S,+BAKjE,IAAMc,EAAY,CACdC,MAAO,SAGLC,EAAQ,CACVC,OAAQ,SAGNC,EAAU,CACZH,MAAO,QACPI,SAAU,OAORC,EAAS,CACXC,MAAO,OACPC,MAAO,MACPC,QAAS,OAIb,OADAC,KAAKC,aAED,yBAAKC,UAAU,OACX,yBAAKA,UAAW,KAAMC,MAAOb,GACzB,wBAAIa,MAAOT,GAAX,+CAEJ,yBAAKS,MAAOb,GACR,yBAAKY,UAAW,QAASC,MAAOP,GAC5B,yBAAKO,MAAOX,EAAOY,IAAK,yGAA0GC,IAAK,UACvI,6DAAmCL,KAAK7B,MAAMC,QAElD,yBAAK8B,UAAW,QAASC,MAAOP,GAC5B,yBAAKO,MAAOX,EAAOa,IAAK,QAASD,IAAK,qCACtC,6DAAmCJ,KAAK7B,MAAME,SAGtD,wBAAI8B,MAAOT,GAAX,qCACsC,4BAAQS,MA3BnC,CACfR,SAAU,UA0B4DK,KAAK7B,MAAMG,QAD7E,U,GApFkBgC,IAAMC,YCSzBC,MARf,WACI,OACI,6BACI,kBAAC,EAAD,QCKQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.4de68be4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './component.css'\r\n\r\nexport default class Data extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            biden: 'Please wait...',\r\n            trump: 'Please wait...',\r\n            winner: 'Please wait...'\r\n        }\r\n    }\r\n\r\n    findWinner() {\r\n        let bidenVotes = 0\r\n        let trumpVotes = 0\r\n        let winner = 'Donald Trump'\r\n        fetch('http://localhost:1234/GET-Ballots')\r\n            .then(data => data.json())\r\n            .then((body) => {\r\n                body = body.data\r\n\r\n                for (let key in Object.keys(body)) {\r\n                    let temp = body[key].votedFor\r\n                    if (temp === \"Justin Trudeau\") {\r\n                        bidenVotes += 1\r\n                    } else if (temp === \"Donald Trump\") {\r\n                        trumpVotes += 1\r\n                    }\r\n                }\r\n\r\n                if(bidenVotes > trumpVotes){\r\n                    winner = 'Joseph Biden'\r\n                }else{\r\n                    winner = 'Donald Trump'\r\n                }\r\n\r\n                this.setState({\r\n                    biden: bidenVotes,\r\n                    trump: trumpVotes,\r\n                    winner: winner\r\n                })\r\n                console.log(`Biden Votes: ${bidenVotes} - Trump Votes: ${trumpVotes}`)\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const whiteFont = {\r\n            color: \"white\"\r\n        }\r\n\r\n        const image = {\r\n            height: \"300px\"\r\n        }\r\n\r\n        const bigFont = {\r\n            color: \"white\",\r\n            fontSize: \"3em\"\r\n        }\r\n\r\n        const biggerFont = {\r\n            fontSize: \"1.5em\"\r\n        }\r\n\r\n        const column = {\r\n            float: \"left\",\r\n            width: \"49%\",\r\n            padding: \"5px\",\r\n        }\r\n\r\n        this.findWinner()\r\n        return (\r\n            <div className=\"App\">\r\n                <div className={\"hi\"} style={whiteFont}>\r\n                    <h1 style={bigFont}>United States of America Federal Elections</h1>\r\n                </div>\r\n                <div style={whiteFont}>\r\n                    <div className={\"Biden\"} style={column}>\r\n                        <img style={image} src={\"https://pyxis.nymag.com/v1/imgs/f07/b07/b59c01f2ac3fe7119f7e6abc74de281778-joe-biden.rsquare.w1200.jpg\"} alt={\"Biden\"}/>\r\n                        <h2>Total Votes for Joseph Biden: {this.state.biden}</h2>\r\n                    </div>\r\n                    <div className={\"Trump\"} style={column}>\r\n                        <img style={image} alt={\"Trump\"} src={\"https://i.imgflip.com/127vzs.jpg\"}/>\r\n                        <h2>Total Votes for Donald Trump: {this.state.trump}</h2>\r\n                    </div>\r\n                </div>\r\n                <h1 style={bigFont}>\r\n                    Your next president will be       <strong style={biggerFont}>{this.state.winner}</strong>.\r\n                </h1>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport Data from './component'\n\nfunction App() {\n    return (\n        <div>\n            <Data/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}